/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Rhythmbox_Player
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Rhythmbox_Player

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_play_pause (DBusGProxy *proxy, const gboolean IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "playPause", error, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_play_pause_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_play_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_play_pause_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_play_pause_async (DBusGProxy *proxy, const gboolean IN_arg0, org_gnome_Rhythmbox_Player_play_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "playPause", org_gnome_Rhythmbox_Player_play_pause_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_previous (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "previous", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_previous_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_previous_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_previous_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_previous_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_previous_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "previous", org_gnome_Rhythmbox_Player_previous_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_next_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "next", org_gnome_Rhythmbox_Player_next_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_get_playing (DBusGProxy *proxy, gboolean* OUT_playing, GError **error)

{
  return dbus_g_proxy_call (proxy, "getPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_playing, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_get_playing_reply) (DBusGProxy *proxy, gboolean OUT_playing, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_get_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_playing;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_playing, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_get_playing_reply)data->cb) (proxy, OUT_playing, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_get_playing_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_get_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getPlaying", org_gnome_Rhythmbox_Player_get_playing_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_get_playing_uri (DBusGProxy *proxy, char ** OUT_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "getPlayingUri", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_uri, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_get_playing_uri_reply) (DBusGProxy *proxy, char * OUT_uri, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_get_playing_uri_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_uri;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_uri, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_get_playing_uri_reply)data->cb) (proxy, OUT_uri, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_get_playing_uri_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_get_playing_uri_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getPlayingUri", org_gnome_Rhythmbox_Player_get_playing_uri_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_get_elapsed (DBusGProxy *proxy, guint* OUT_elapsed, GError **error)

{
  return dbus_g_proxy_call (proxy, "getElapsed", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_elapsed, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_get_elapsed_reply) (DBusGProxy *proxy, guint OUT_elapsed, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_get_elapsed_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_elapsed;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_elapsed, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_get_elapsed_reply)data->cb) (proxy, OUT_elapsed, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_get_elapsed_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_get_elapsed_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getElapsed", org_gnome_Rhythmbox_Player_get_elapsed_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_set_elapsed (DBusGProxy *proxy, const guint IN_elapsed, GError **error)

{
  return dbus_g_proxy_call (proxy, "setElapsed", error, G_TYPE_UINT, IN_elapsed, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_set_elapsed_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_set_elapsed_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_set_elapsed_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_set_elapsed_async (DBusGProxy *proxy, const guint IN_elapsed, org_gnome_Rhythmbox_Player_set_elapsed_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setElapsed", org_gnome_Rhythmbox_Player_set_elapsed_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_UINT, IN_elapsed, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_get_volume (DBusGProxy *proxy, gdouble* OUT_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "getVolume", error, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_volume, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_get_volume_reply) (DBusGProxy *proxy, gdouble OUT_volume, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_get_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_volume;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_volume, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_get_volume_reply)data->cb) (proxy, OUT_volume, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_get_volume_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_get_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getVolume", org_gnome_Rhythmbox_Player_get_volume_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_set_volume (DBusGProxy *proxy, const gdouble IN_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "setVolume", error, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_set_volume_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_set_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_set_volume_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_set_volume_async (DBusGProxy *proxy, const gdouble IN_volume, org_gnome_Rhythmbox_Player_set_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setVolume", org_gnome_Rhythmbox_Player_set_volume_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_set_volume_relative (DBusGProxy *proxy, const gdouble IN_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "setVolumeRelative", error, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_set_volume_relative_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_set_volume_relative_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_set_volume_relative_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_set_volume_relative_async (DBusGProxy *proxy, const gdouble IN_volume, org_gnome_Rhythmbox_Player_set_volume_relative_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setVolumeRelative", org_gnome_Rhythmbox_Player_set_volume_relative_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_set_mute (DBusGProxy *proxy, const gboolean IN_mute, GError **error)

{
  return dbus_g_proxy_call (proxy, "setMute", error, G_TYPE_BOOLEAN, IN_mute, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_set_mute_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_set_mute_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_set_mute_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_set_mute_async (DBusGProxy *proxy, const gboolean IN_mute, org_gnome_Rhythmbox_Player_set_mute_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setMute", org_gnome_Rhythmbox_Player_set_mute_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_mute, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Rhythmbox_Player_get_mute (DBusGProxy *proxy, gboolean* OUT_mute, GError **error)

{
  return dbus_g_proxy_call (proxy, "getMute", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_mute, G_TYPE_INVALID);
}

typedef void (*org_gnome_Rhythmbox_Player_get_mute_reply) (DBusGProxy *proxy, gboolean OUT_mute, GError *error, gpointer userdata);

static void
org_gnome_Rhythmbox_Player_get_mute_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_mute;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_mute, G_TYPE_INVALID);
  (*(org_gnome_Rhythmbox_Player_get_mute_reply)data->cb) (proxy, OUT_mute, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Rhythmbox_Player_get_mute_async (DBusGProxy *proxy, org_gnome_Rhythmbox_Player_get_mute_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getMute", org_gnome_Rhythmbox_Player_get_mute_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Rhythmbox_Player */

G_END_DECLS
